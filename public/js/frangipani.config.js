/*
 * Frangipani config page Javascript.
 * @author Ron Ammar
 */

/* Wrap all code in an immediately-invoked function expressions to avoid 
 * global variables. */
(function() {


//=======================================================================
// Auxiliary helper functions
//=======================================================================

var aux= {

	/* Default constants. It is important to note that these defaults
	 * rely on the third party naming schema of annovar. therefore,
	 * ANNOVAR_ANNOTATION must be upadted and changed to accomodate
	 * the specific usage of each database*/
	INSTITUTION: "The Hospital for Sick Children",
	MAX_RECORDS: 500,
	ANNOVAR_ANNOTATIONS: {
		"snp138":{'usage':'f','index':false},
		"1000g2014sep_all":{'usage':'f','index':true},
		"1000g2014sep_amr":{'usage':'f','index':false},
		"1000g2014sep_eur":{'usage':'f','index':false},
		"1000g2014sep_sas":{'usage':'f','index':false},
		"1000g2014sep_eas":{'usage':'f','index':false},
		"1000g2014sep_afr":{'usage':'f','index':false},
		"esp6500_all":{'usage':'f','index':true},
		"cg69":{'usage':'f','index':true},
		"clinvar_20140929":{'usage':'f','index':false},
		"ljb26_all":{'usage':'f','index':false},
	},
	FOOTER: "Report generated by Frangipani.",
	DISCLAIMER_PREFIX: 'This data is provided "as is", "where is" and without any express or implied warranties, including, but not limited to, any implied warranties of merchantability and/or fitness for a particular purpose. In no event shall ',
	DISCLAIMER_SUFFIX: ', nor its agents, employers or representatives be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way or form out of the use of this data, even if advised of the possibility of such damage. All users assume the risk and responsibility for the accuracy, completeness or usefulness, or lack thereof, of any information, apparatus, product or process disclosed or that the use hereof would or would not infringe the rights of any other party.',
	DISCLAIMER: undefined,

	/* Cache of handlebars templates. */
	template_cache: undefined,

	/* Refresh all relevant event handlers and Foundation javascript. */
	refresh: function() {
		$(document).foundation();
	},

	/* Update the Disclaimer using the current institution name. */
	updateDisclaimer: function() {
		aux.DISCLAIMER= aux.DISCLAIMER_PREFIX + aux.INSTITUTION + aux.DISCLAIMER_SUFFIX;
	},

	/* Convert form into JSON.
	 * Function adapted from http://stackoverflow.com/questions/1184624/convert-form-data-to-js-object-with-jquery */
	serializeObject: function(form) {
	    var o = {};
	    var a = form.serializeArray();
	    $.each(a, function() {
	        if (o[this.name] !== undefined) {
	            if (!o[this.name].push) {
	                o[this.name] = [o[this.name]];
	            }
	            o[this.name].push(this.value || '');
	        } else {
	            o[this.name] = this.value || '';
	        }
	    });
	    return o;
	}

};


//=======================================================================
// Set up a ready handler, a function to run when the DOM is ready
//=======================================================================

var handler= function() {

	/* 
	 * Set the config defaults:
	 */

	// Customize the disclaimer for the institute, using a default first
	aux.updateDisclaimer();
	$("#frangipani-disclaimer").val(aux.DISCLAIMER);
	$("#frangipani-institution").attr("placeholder", "e.g. " + aux.INSTITUTION);
	$("#frangipani-institution").on("change", function(event) {
		aux.INSTITUTION= $(this).val();
		aux.updateDisclaimer();
		$("#frangipani-disclaimer").val(aux.DISCLAIMER);
	});

	// Set the maximum number of records.
	$("#frangipani-max-records-slider").foundation("slider", "set_value", aux.MAX_RECORDS);

	// Attached a listener to max records slider and associated input field
	var updateSlider= function(event) {
		$("#frangipani-max-records-slider").foundation("slider", "set_value", $(this).val());		
	};
	$("#frangipani-max-records-slider-output")
		.on("change", updateSlider)
		.on("keyup", updateSlider);

	// Set default footer
	$("#frangipani-footer").val(aux.FOOTER);


	/* Create switches for each annovar annotation. */
	var context= {
		"annotations": Object.keys(aux.ANNOVAR_ANNOTATIONS)
	};

	asyncRenderHbs("frangipani-config-annovar-annotation.hbs", context)
		.then(function(html) {
			// append to DOM
			$("#frangipani-annovar-options").append(html);
		});

	/* Receive the submitted form data (Abide validation events are handled by
	 * foundation ). */
	$("#frangipani-config-form").on('invalid.fndtn.abide', function () {
		// Invalid form input
		var invalid_fields = $(this).find('[data-invalid]');
		console.log(invalid_fields);
	})
	$("#frangipani-config-form").on('valid.fndtn.abide', function () {
		// Tell user we are submitting
		$("#frangipani-config-form-button").text("Sending...");

		// Valid form input
		var formInput= aux.serializeObject($(this));

		// Iterate over the annovar annotation fields and put them into a list
		var annovarAnnotationList= [];
		var annovarUsageList = [];
		var annovarIndexList = [];
		var prefixPattern= /^frangipani\-annovar\-annotation\-/;
		for (var key in formInput) {
			// Important check that property is not from inherited prototype prop
			if(formInput.hasOwnProperty(key) && prefixPattern.test(key)) {
				annovarAnnotationList.push(formInput[key]);
				annovarUsageList.push(aux.ANNOVAR_ANNOTATIONS[formInput[key]].usage);
				(aux.ANNOVAR_ANNOTATIONS[formInput[key]].index ? annovarIndexList.push(formInput[key].toLowerCase()):undefined);


				// remove from the form input object
				delete formInput[key];
			} else if (formInput.hasOwnProperty(key) && key == 'default-annotation'){
				annovarAnnotationList.unshift(formInput[key]);
				annovarUsageList.unshift('g');
				annovarIndexList.unshift('gene_' + formInput[key]);
				annovarIndexList.unshift('func_' + formInput[key]);
				delete formInput[key]
			}
		}
		formInput["annovar-dbs"]= annovarAnnotationList;
		formInput["annovar-usage"] = annovarUsageList;
		formInput["annovar-index"] = annovarIndexList;

		var promise= Promise.resolve($.ajax({
			url: "/config",
			type: "POST",
			contentType: "application/json",
			dataType: "json",
			data: JSON.stringify(formInput)
		}));
		promise.then(function(result) {
			window.location.replace("/");  //redirect to home page
		});
	});

};


/* 
 * Wait for the DOM to load before any processing.
 */
$(document).ready(handler);

})();





