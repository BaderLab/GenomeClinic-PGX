//que and run
var Promise = require('bluebird');
var nodeConstant= require("./node_constants"); 
var annotateFile = require('../scripts/annotateAndAddVariants');
var fs = Promise.promisifyAll(require('fs'));



function queue(){
}


//variables
queue.prototype.isRunning = false;
queue.prototype.queue = [];

//functions
queue.prototype.addToQueue = function(fileParams, patientFields){
	var self = this
	var promise = new Promise(function(resolve,reject){
		var inputObj = {
			fileInfo: fileParams,
			fields: patientFields
		};
		self.queue.push(inputObj);
		resolve(self.queue);
	});
	return promise;
};

queue.prototype.removeFirst = function(){
	var self = this
	var promise = new Promise(function(resolve,reject){
		self.queue.shift();
		resolve(self.queue);
	});
	return promise;
}
queue.prototype.first = function(){
	var self = this;
	var promise = new Promise(function(resolve,reject){
		var outObj = self.queue[0];
		resolve(outObj);
	});
	return promise;
}

queue.prototype.splitInputFields = function(fields){
	var self = this;
	var promise = new Promise(function(resolve,reject){
		var tempObj = {};
		var outList = [];

		for (field in fields){
			if (fields.hasOwnProperty(field)){
				var splitFields = field.split('-');
				if (!tempObj.hasOwnProperty(splitFields[0]))
					tempObj[splitFields[0]] = {};
				tempObj[splitFields[0]][splitFields[1]] = fields[field];
			}
		}
		for (num in tempObj){
			if (tempObj.hasOwnProperty(num)){
				outList.push(tempObj[num]);
			}
		}
		resolve(outList);
	})
	return promise;
}


queue.prototype.run = function(){
	var self = this;
	var fileInfo;
	var fields;
	//var promise = new Promise(function(resolve,reject){
	if (!self.isRunning)
		self.isRunning = true;

	self.first().then(function(params){
		fileInfo = params.fileInfo;
		fields = params.fields;
	}).then(function(){
		return self.splitInputFields(fields)
	}).each(function(patientFields){
		return dbFunctions.addPatient(patientFields);
	}).then(function(result){
		var options = {
			input:'upload/vcf/' + fileInfo.name,
			patients:result
		};
		return annotateFile(options);
	}).then(function(result){
		return self.removeFirst()
	}).then(function(){
		if (self.queue.length > 0){
			return self.run();
		} else {
			self.isRunning = false;
		}
	}).catch(function(err){
		console.log(err);
	});
		// do somehting here;
}


module.exports = queue;
