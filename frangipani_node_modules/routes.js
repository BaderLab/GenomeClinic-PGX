/*
 * Defines the routes for the Server.
 * @author Ron Ammar
 */

var express= require("express");
var ga4ghRequests= require("./ga4gh-requests");
var bodyParser= require("body-parser");
var uploader= require("jquery-file-upload-middleware");
var fs=require('fs');
var dbConstants= require("./mongodb_constants");
var dbFunctions= require("./mongodb_functions");
var nodeConstant= require("./node_constants"); 
var Promise= require("bluebird");
var Queue = require('./queue');

var queue = new Queue();

var getRouter= express.Router();
getRouter.use(function(request, response) {
	var promise;

	if (request.baseUrl == "/datasets") {
		promise= ga4ghRequests.getProjects();
	} else if (request.baseUrl == "/patients") {
		promise= dbFunctions.findAllPatients(true, {sort: {"date": -1, "time": -1}});
	}

	promise.then(function(result) {
		// DEPRECATED - this is for the old GA4GH stuff.
		// Currently, I'm not paying attention to the next page token because
		// it doesn't always appear. If it ever does, write an error to console
		// so that it is brought to my attention.
		if (result.nextPageToken !== undefined) {
			console.log("ERROR: nextPageToken found, not managed.");
		}

		response.send(result);
	}, function(err) {
		console.log(err.stack);
	});
});

var postRouter= express.Router();
postRouter.use(bodyParser.json());
postRouter.use(function(request, response) {
	var promise= undefined;

	if (request.baseUrl == "/callsets/search") {
		promise= ga4ghRequests.getPatients(request.body);
	} else if (request.baseUrl == "/variants/search") {
		promise= ga4ghRequests.getVariants(request.body);
	} else if (request.baseUrl == "/config") {
		// Execute configuration actions
		var configSettings= request.body;
		promise= dbFunctions.update(dbConstants.ADMIN_COLLECTION_ID, {}, {$set: configSettings});
		promise.then(function(result) {
			dbFunctions.isConfigured(true);
		});
	} else if (request.baseUrl == "/pgx") {
		////////////////
	}

	promise.then(function(result) {
		response.send(result);
	}, function(err) {
		console.log(err.toString());
	});
});




/* jquery-file-upload-middlware routs
 * The jquery file upload middleware handles the bulf ot the work when it comes to the file
 * Upload. The jquery-file-upload plugin emits an ajax call and then the middleware handles 
 * the response. It has automatic event handlers for listeing to cancellations (aka aborts)
 * and failures. In these scenarios it will automatically delete the incomplete file.
 * additionally it also has handlers for file success and file download
*/


//Configure the uploader to tell it what directories to use
uploader.configure({

	tmpDir:nodeConstant.TMP_UPLOAD_DIR,
	uploadDir:nodeConstant.VCF_UPLOAD_DIR,
	uploadUrl:'/upload/vcf'
});


/* Event Handler that is triggered upon successful completion of the file upload
 * This handler facilitates the addition of annotation information adn the inclusion
 * of the vcf file into the local database
*/
uploader.on('end',function(fileInfo,req,res){
	queue.addToQueue(fileInfo,req.fields)
	.then(function(){
		if (!queue.isRunning)
			return queue.run();
	}).catch(function(err){console.log(err.toString())});
})



//Main uploader Route function
var uploadRouter = express.Router();
uploadRouter.use(uploader.fileHandler());

//get Patient identifiers for autocompletion and field validation
var getPatients = express.Router();
getPatients.use(bodyParser.json());
getPatients.use(function(request,response){
	var promise;
	if (request.baseUrl == "/database/getPatients"){
		promise = dbFunctions.findAllPatientIds().then(function(result){
			var fieldsArray = []
			queue.queue.map(function(item){
				fieldsArray = fieldsArray.concat(item['fields']);
			});
			return result.concat(fieldsArray);
		});
	} else if (request.baseUrl == "/database/find"){
		promise = dbFunctions.findAllPatients().then(function(result){
			var fieldsArray = []
			queue.queue.map(function(item){
				fieldsArray = fieldsArray.concat(item['fields']);
			});
			return result.concat(fieldsArray);
		});
	}
	promise.then(function(result){
		response.send(result)
	}).catch(function(err){
		console.log(err.toString())
	});

});


exports.getRouter= getRouter;
exports.postRouter= postRouter;
exports.uploadRouter = uploadRouter;
exports.getPatients = getPatients;



