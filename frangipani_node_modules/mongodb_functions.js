/* 
 * MongoDB interface for node server.
 * @author Ron Ammar
 */

var MongoClient= require("mongodb").MongoClient;
var Promise = require("bluebird");
var assert= require("assert");


/* Default DB parameters. */
var db= undefined; // MongoDB connection db object (once connected)
var DB_NAME= "frangipaniDB";
var DB_HOST= "localhost";
var DB_PORT= 27017;  // default MongoDB port
var systemNamespaces= "system.namespaces";

/* Default DB collections and fields. */
var ADMIN_COLLECTION_ID= "admin";
var PATIENTS_COLLECTION_ID= "patients";
var CURRENT_PATIENT_INDEX= "curr_patient_index";


/* Connect to the DB using default parameters.
 * If connection has already been initialized, but closed, it is opened.
 * If connection is already open, the connection pool is refereshed.
 * Returns a promise if connection does not exist, null otherwise. */
var connect= function() {
	// if DB exists and is open/closed, refresh/open the connection pool
	if (db) {
		db.open();
		return null;
	}

	var dbURL= "mongodb://" + DB_HOST + ":" + DB_PORT + "/" + DB_NAME;
	var promise= new Promise(function(resolve, reject) {
		MongoClient.connect(dbURL, function(err, db) {
			if (err) {
				reject(err);
			}
			resolve(db);
		});
	});
	return promise;
};


/* Close the DB connection. */
var closeConnection= function(callback) {
	db.close(callback);
};


/* Return the count of documents matching the query.
 * Returns a promise. */
var count= function(collectionName, query) {
	var promise= new Promise(function(resolve, reject) {
		db.collection(collectionName).count(query, function(err, count){
			if (err) {
				reject(err);
			}
			resolve(count);
		});
	});
	return promise;
};


/* Create the collections required for an initialized DB.
 * Returns a promise. */
var createInitCollections= function() {
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	// Set the patient index to 1
	db.collection(ADMIN_COLLECTION_ID).insert({CURRENT_PATIENT_INDEX: 1});
};



/* Connect to the DB and initialize it using defaults if the DB has not been
 * initialized already. */
var connectAndInitializeDB= function() {
	// Connect to MongoDB
	connect().then(function(result) {
		db= result;
		console.log("Connected to MongoDB.");

		/* Check if the "FrangipaniDB" DB already exists. If it doesn't, 
		 * we need to intialize the DB. */
		 count(systemNamespaces).then(function(result) {
		 	if (!result) { // # of collections in DB is 0
		 		console.log("Initializing FrangipaniDB.");
		 		createInitCollections();
		 	} else {
		 		console.log("FrangipaniDB has already been initialized.");
		 	}

		 }).catch(function(err) {
		 	console.error(err.toString());
			console.error(err.stack);
		 });

	}).catch(function(err) {
		console.error(err.toString());
		console.error(err.stack);
	});
};


/* Assign desired objects to exports. */ 
exports.connectAndInitializeDB= connectAndInitializeDB;
exports.closeConnection= closeConnection;


















