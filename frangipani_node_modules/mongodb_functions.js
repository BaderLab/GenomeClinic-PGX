/* 
 * MongoDB interface for node server.
 * @author Ron Ammar
 */

var MongoClient= require("mongodb").MongoClient;
var Promise = require("bluebird");
var assert= require("assert");
var dbConstant= require("./mongodb_constants");


/* Default DB parameters. */
var db= undefined; // MongoDB connection db object (once connected)
var DB_NAME= "frangipaniDB";
var DB_HOST= "localhost";
var DB_PORT= 27017;  // default MongoDB port
var systemNamespaces= "system.namespaces";

/* Connect to the DB using default parameters.
 * If connection has already been initialized, but closed, it is opened.
 * If connection is already open, the connection pool is refereshed.
 * Returns a promise if connection does not exist, null otherwise. */
var connect= function() {
	// if DB exists and is open/closed, refresh/open the connection pool
	if (db) {
		db.open();
		return null;
	}

	var dbURL= "mongodb://" + DB_HOST + ":" + DB_PORT + "/" + DB_NAME;
	var promise= new Promise(function(resolve, reject) {
		MongoClient.connect(dbURL, function(err, db) {
			if (err) {
				reject(err);
			}
			resolve(db);
		});
	});
	return promise;
};


/* Close the DB connection. */
var closeConnection= function(callback) {
	db.close(callback);
};


/* Return the count of documents matching the query.
 * Returns a promise.
 * Precondition: DB connection is active. */
var count= function(collectionName, query) {
	var promise= new Promise(function(resolve, reject) {
		db.collection(collectionName).count(query, function(err, count){
			if (err) {
				reject(err);
			}
			resolve(count);
		});
	});
	return promise;
};


/* Insert a document into a collection.
 * Returns a promise.
 * Precondition: DB connection is active. */
var insert= function(collectionName, doc) {
	// validate input
	assert(Object.prototype.toString.call(collectionName) == "[object String]",
		"Invalid collection");
	assert(Object.prototype.toString.call(doc) == "[object Object]",
		"Invalid document");

	var promise= new Promise(function(resolve, reject) {
		db.collection(collectionName).insert(doc, {}, function(err, result) {
			if (err) {
				reject(err);
			}
			resolve(result);
		});
	});
	return promise;
}


/* Create index for a specific field in a collection.
 * spec format example: {a:1, b:-1}, a in ascending index order, b in descending
 * options format example: {unique: true} to ensure that the index is unique
 * Returns a promise. */
var createIndex= function(collectionName, spec, options) {
	// validate input
	assert(Object.prototype.toString.call(collectionName) == "[object String]",
		"Invalid collection");
	assert(Object.prototype.toString.call(spec) == "[object Object]",
		"Invalid spec");

	var promise= new Promise(function(resolve, reject) {
		db.collection(collectionName).createIndex(spec, options, function(err, result) {
			if (err) {
				reject(err);
			}
			resolve(result);
		});
	});
	return promise;	
};


/* Create the collections required for an initialized DB.
 * Returns a promise. */
var createInitCollections= function() {
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	var promise= new Promise(function(resolve, reject) {
		var currentDocument= undefined;

		currentDocument= {};
		currentDocument[dbConstant.CURRENT_PATIENT_INDEX_FIELD]= 1;

		// Create a patient collection and index by unique identifiers.
		insert(dbConstant.ADMIN_COLLECTION_ID, currentDocument)
			.then(function(result) {
				// Patient IDs are unique.
				currentDocument= {};
				currentDocument[dbConstant.PATIENT_ID_FIELD]= 1;  // index in ascending order
				return createIndex(dbConstant.PATIENTS_COLLECTION_ID, currentDocument, {unique: true});
			}).then(function(result){
				// Collection IDs are also unique
				currentDocument= {};
				currentDocument[dbConstant.COLLECTION_ID_FIELD]= -1;  // index in descending order
				return createIndex(dbConstant.PATIENTS_COLLECTION_ID, currentDocument, {unique: true});
			}).then(function(result) {
				resolve();
			}).catch(function(err) {
				console.error(err.toString());
				console.error(err.stack);
			});
	});
	return promise;
};


/* Create a patient with the input patient ID. */
var addPatient= function(patientID) {
	/* Get most recent patient collection ID integer from the admin table
	 * and increment it. */
	db.collection(dbConstant.ADMIN_COLLECTION_ID).findOne({}, function(err, doc) {
		assert.equal(err, null);

		var currentPatientCollectionID= doc[dbConstant.CURRENT_PATIENT_INDEX_FIELD];

		// Add new patient
		currentDocument= {};
		currentDocument[dbConstant.PATIENT_ID_FIELD]= patientID;
		currentDocument[dbConstant.COLLECTION_ID_FIELD]= "p" + currentPatientCollectionID;
		insert(dbConstant.PATIENTS_COLLECTION_ID, currentDocument)
			.then(function(result) {
				// Increment patient collection ID only after insert is done
				var currentDocument= {};
				currentDocument[dbConstant.CURRENT_PATIENT_INDEX_FIELD]= 1;  // increment by 1
				db.collection(dbConstant.ADMIN_COLLECTION_ID).update({}, {$inc: currentDocument});
			}).catch(function(err) {
				console.error(err.toString());
				console.error(err.stack);
			});
	});
};


/* Connect to the DB and initialize it using defaults if the DB has not been
 * initialized already. */
var connectAndInitializeDB= function() {
	// Connect to MongoDB
	connect().then(function(result) {
		db= result;
		console.log("Connected to MongoDB.");

		/* Check if the "FrangipaniDB" DB already exists. If it doesn't, 
		 * we need to intialize the DB. */
		 count(systemNamespaces).then(function(result) {
		 	if (!result) { // # of collections in DB is 0
		 		console.log("Initializing FrangipaniDB.");
		 		createInitCollections().then(function(result) {
		 			addPatient("test_first");

		 			setTimeout( function() {
						addPatient("test_first");
		 			}, 5000);

		 			setTimeout( function() {
						addPatient("test_third");
		 			}, 10000);

		 		});

		 	} else {
		 		console.log("FrangipaniDB has already been initialized.");
		 	}

		 }).catch(function(err) {
		 	console.error(err.toString());
			console.error(err.stack);
		 });

	}).catch(function(err) {
		console.error(err.toString());
		console.error(err.stack);
	});
};


/* Assign desired objects to exports. */ 
exports.connectAndInitializeDB= connectAndInitializeDB;
exports.closeConnection= closeConnection;


















