/* 
 * MongoDB interface for node server.
 * @author Ron Ammar
 */

var MongoClient= require("mongodb").MongoClient;
var Promise = require("bluebird");
var assert= require("assert");
var dbConstants = require("./mongodb_constants");


/* Default DB parameters. */
var dbURL= undefined;
var db= undefined; // MongoDB connection db object (once connected)


/* Connect to the DB using default parameters.
 * If connection has already been initialized, but closed, it is opened.
 * If connection is already open, the connection pool is refereshed.
 * Returns a promise if connection does not exist, null otherwise. */
var connect= function() {
	// if DB exists and is open/closed, refresh/open the connection pool
	if (db) {
		db.open();
		return null;
	}

	dbURL= "mongodb://" + dbConstants.DB_HOST + ":" + dbConstants.DB_PORT + "/" + dbConstants.DB_NAME;

	var promise= new Promise(function(resolve, reject) {
		MongoClient.connect(dbURL, function(err, db) {
			if (err) {
				reject(err);
			}
			resolve(db);
		});
	});
	return promise;
};


/* Close the DB connection. */
var closeConnection= function(callback) {
	assert.notStrictEqual(db, undefined); // ensure we're connected first
	db.close(callback);
};


/* Return the count of documents matching the query.
 * Returns a promise. */
var count= function(collectionName, query) {
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	var promise= new Promise(function(resolve, reject) {
		db.collection(collectionName).count(query, function(err, count){
			if (err) {
				reject(err);
			}
			resolve(count);
		});
	});
	return promise;
};


/* Insert a document into a collection.
 * Returns a promise. */
var insert= function(collectionName, doc) {
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	// validate input
	assert(Object.prototype.toString.call(collectionName) == "[object String]",
		"Invalid collection");
	assert(Object.prototype.toString.call(doc) == "[object Object]",
		"Invalid document");

	var promise= new Promise(function(resolve, reject) {
		db.collection(collectionName).insert(doc, {}, function(err, result) {
			if (err) {
				reject(err);
			}
			resolve(result);
		});
	});
	return promise;
};


/* Insert up to 1000 documents at once into a collection.
 * Takes one Object with two paramters arguments:
 * tablename: tablename
 * documents: {object to insert}
 * Returns a promise. */
var insertMany = function(options){
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	// validate input
	assert(Object.prototype.toString.call(options) == "[object Object]",
		"Invalid Options");

	var promise = new Promise(function(resolve,reject){
		if(!options.collectionName)
			reject(new ReferenceError("No Table Name Provided"));
		if(options.documents.length > 1000)
			reject(new Error("Must contain less then 1000 documents"))

		db.collection(options.collectionName,function(err,collection){
			collection.insertMany(options.documents,function(err,doc){
				if(err){
					reject(err)
				} else {
					resolve(doc);
				}
			});
		});
	});
	return promise;
};


/* Create index for a specific field in a collection.
 * spec format example: {a:1, b:-1}, a in ascending index order, b in descending
 * options format example: {unique: true} to ensure that the index is unique
 * Returns a promise. */
var createIndex= function(collectionName, spec, options) {
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	// validate input
	assert(Object.prototype.toString.call(collectionName) == "[object String]",
		"Invalid collection");
	assert(Object.prototype.toString.call(spec) == "[object Object]",
		"Invalid spec");

	var promise= new Promise(function(resolve, reject) {
		db.collection(collectionName).createIndex(spec, options, function(err, result) {
			if (err) {
				reject(err);
			}
			resolve(result);
		});
	});
	return promise;	
};


/* Create the collections required for an initialized DB.
 * Returns a promise. */
var createInitCollections= function() {
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	var promise= new Promise(function(resolve, reject) {
		var currentDocument= undefined;

		currentDocument= {};
		currentDocument[dbConstants.CURRENT_PATIENT_INDEX_FIELD]= 1;
		currentDocument[dbConstants.CURRENT_PANEL_INDEX_FIELD]= 1;
		// when the DB is first initialized, the server is not configured
		currentDocument[dbConstants.SERVER_CONFIGURED_ID_FIELD]= false;

		// Create a patient collection and index by unique identifiers.
		// Do the same for panel collections.
		insert(dbConstants.ADMIN_COLLECTION_ID, currentDocument)
			.then(function(result) {
				// Patient IDs are unique.
				currentDocument= {};
				currentDocument[dbConstants.PATIENT_ID_FIELD]= 1;  // index in ascending order
				return createIndex(dbConstants.PATIENTS_COLLECTION_ID, currentDocument, {unique: true});
			})
			.then(function(result){
				// Patient Collection IDs are also unique
				currentDocument= {};
				currentDocument[dbConstants.COLLECTION_ID_FIELD]= -1;  // index in descending order
				return createIndex(dbConstants.PATIENTS_COLLECTION_ID, currentDocument, {unique: true});
			})
			.then(function(result) {
				// Panel IDs are unique.
				currentDocument= {};
				currentDocument[dbConstants.PANEL_ID_FIELD]= 1;  // index in ascending order
				return createIndex(dbConstants.PANELS_COLLECTION_ID, currentDocument, {unique: true});
			})
			.then(function(result){
				// Panel Collection IDs are also unique
				currentDocument= {};
				currentDocument[dbConstants.COLLECTION_ID_FIELD]= -1;  // index in descending order
				return createIndex(dbConstants.PANELS_COLLECTION_ID, currentDocument, {unique: true});
			})
			.then(function(result) {
				resolve();
			})
			.catch(function(err) {
				reject(err);
			});
	});
	return promise;
};


/* general find query to find All documents matching string. 
 * Returns a promise. */
var find= function(collectionName, query, fields, options) {
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	// validate input
	assert(Object.prototype.toString.call(collectionName) == "[object String]",
		"Invalid collection");
	assert(Object.prototype.toString.call(query) == "[object Object]",
		"Invalid query");

	if (options){
		if(options == {})
			options = undefined;

		else if (options)
			assert(Object.prototype.toString.call(options) == "[object Object]",
				"Invalid Options");
	}

	var promise= new Promise(function(resolve, reject) {
		db.collection(collectionName)
		.find(query, fields, options)
		.toArray(function(err, doc) {
			if (err) {
				reject(err);
			}
			resolve(doc);
		});
	});
	return promise;	
};


/* Find a single document based on the query. 
 * Returns a promise. */
var findOne= function(collectionName, query) {
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	// validate input
	assert(Object.prototype.toString.call(collectionName) == "[object String]",
		"Invalid collection");
	assert(Object.prototype.toString.call(query) == "[object Object]",
		"Invalid query");

	var promise= new Promise(function(resolve, reject) {
		db.collection(collectionName).findOne(query, function(err, doc) {
			if (err) {
				reject(err);
			}
			resolve(doc);
		});
	});
	return promise;	
};


/* Find all the patients in the 'patients' collection.
 * Returns a promise that returns an array of elements corresponding to All
 * the patient_id's*/
var findAllPatientIds=function(){
	assert.notStrictEqual(db, undefined); // ensure we're connected first
	var collectionName = dbConstants.PATIENTS_COLLECTION_ID;
	var options = {'_id':0};
	options[dbConstants.PATIENT_ID_FIELD]=1;	
	return find(collectionName, {}, {}, options);
};


/* find all the patients in the patient collection and return an array
 * corresponding to the entire document of each patient.
 * If readyOnly == true, return only fully uploaded patients.
 * To get output sorted by date and time(newest patient records first), do:
 * options == {sort: {"date": -1, "time": -1}} */
var findAllPatients=function(readyOnly, options){
	assert.notStrictEqual(db, undefined); // ensure we're connected first
	var collectionName = dbConstants.PATIENTS_COLLECTION_ID;
	var query= {};
	var fields = {'_id': 0};
	if (readyOnly) {
		query["ready"]= true;
	}
	return find(collectionName, query, fields, options);
};


/* Update documents based on the query selector with the doc specifying which 
 * fields to update.
 * Returns a promise. */
var update= function(collectionName, query, doc, options) {
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	// validate input
	assert(Object.prototype.toString.call(collectionName) == "[object String]",
		"Invalid collection");
	assert(Object.prototype.toString.call(query) == "[object Object]",
		"Invalid query");
	assert(Object.prototype.toString.call(doc) == "[object Object]",
		"Invalid update document");
	if (options)
		assert(Object.prototype.toString.call(options) == "[object Object]",
		"Invalid update options");

	var promise= new Promise(function(resolve, reject) {
		db.collection(collectionName).update(query, doc, options, function(err, resultDoc) {
			if (err) {
				reject(err);
			}
			resolve(resultDoc);
		});
	});
	return promise;
};


/* Create a patient with the input patient ID.
 * Returns a promise which resolves to the new patient collection ID. */
var addPatient= function(options) {
	assert.notStrictEqual(db, undefined); // ensure we're connected first
	var currentPatientCollectionID= undefined;

	var promise= new Promise(function(resolve, reject) {
		/* Get most recent patient collection ID integer from the admin table
		 * and increment it. */
		findOne(dbConstants.ADMIN_COLLECTION_ID, {})
			.then(function(doc) {
				currentPatientCollectionID= doc[dbConstants.CURRENT_PATIENT_INDEX_FIELD];
				// Add new patient
				if (typeof options === 'object'){
					currentDocument = options;
				} else { 
					currentDocument= {};
					currentDocument[dbConstants.PATIENT_ID_FIELD] = options;
				}

				if (currentDocument[dbConstants.PATIENT_ID_FIELD]===undefined)
					throw new ReferenceError("No Patient ID provided");
					

				currentDocument[dbConstants.COLLECTION_ID_FIELD]= "p" + currentPatientCollectionID;
				return insert(dbConstants.PATIENTS_COLLECTION_ID, currentDocument);
			}).then(function(result) {
				// Increment patient collection ID only after insert is done
				var currentDocument= {};
				currentDocument[dbConstants.CURRENT_PATIENT_INDEX_FIELD]= 1;  // increment by 1
				return update(dbConstants.ADMIN_COLLECTION_ID, {}, {$inc: currentDocument});
			}).then(function(result) {
				resolve({newCollection:"p" + currentPatientCollectionID, document:currentDocument});
			}).catch(function(err) {
				console.log(err);
				reject(err);
			});
	});
	return promise;
};


/* find and remove a patient where options are the query to submit
 * returns a promise */
var removePatient = function(options){
	assert.notStrictEqual(db, undefined); // ensure we're connected first

	// validate input
	assert(Object.prototype.toString.call(options) == "[object Object]",
		"Invalid Options");

	var promise = new Promise(function(resolve,reject){
		db.collection('patients',function(err,coll){
			coll.findAndRemove(options,['patient_id',1],function(err,doc){
				if (err){
					reject(err);
				} else {
					resolve(document);
				}
			});
		});
	});
	return promise;
};


/* Create a panel from the input object (in JSON).
 * There are 3 types of panels, "gene", "coord", "marker":
 * 1) gene, 2) chromosomal coordinate, 3) marker
 * If specifying gene or marker panel, pass in a list of genes/markers 
 * (case insensitive):
 * ["cyp2d6", "tpmt", "brca1", "plce1"]
 * or
 * ["rs1128503", "rs2032582", "rs1045642"]
 * If specifying a coordinate panel, pass a list of objects (note chromosome
 * must be passed in as a string, coordinate as an integer):
 * [{"chr": "22", "coord": 4253023}, {"chr": "22", "coord": 4253028}]
 * Returns a promise which resolves to the new panel's collection ID. */
var addPanel= function(panelName, panel) {
	assert.notStrictEqual(db, undefined); // ensure we're connected first
	
	// validate input
	assert(Object.prototype.toString.call(panelName) == "[object String]",
		"Invalid panel name");
	assert(Object.prototype.toString.call(panel) == "[object Array]",
		"Invalid panel");

	var currentPanelCollectionID= undefined;

	var promise= new Promise(function(resolve, reject) {
		/* Get most recent panel collection ID integer from the admin table
		 * and increment it. */
		findOne(dbConstants.ADMIN_COLLECTION_ID, {})
			.then(function(doc) {
				currentPanelCollectionID= doc[dbConstants.CURRENT_PANEL_INDEX_FIELD];
				// Add panel collection ID to panels collection
				currentDocument= {};
				currentDocument[dbConstants.PANEL_ID_FIELD]= panelName;
				currentDocument[dbConstants.COLLECTION_ID_FIELD]= "panel" + currentPanelCollectionID;
				return insert(dbConstants.PANELS_COLLECTION_ID, currentDocument);
			}).then(function(result) {
				// Create a new collection using the currentPanelCollectionID as the name
				// and store the input panel object.
				return new Promise(function(resolve, reject) {
					db.collection("panel" + currentPanelCollectionID, function(err, collection) {
						collection.insertMany(panel, function(err, doc) {
							if(err){
								reject(err)
							} else {
								resolve(doc);
							}
						});
					});
				});
			}).then(function(result) {
				// Increment panel collection ID only after insert is done
				var currentDocument= {};
				currentDocument[dbConstants.CURRENT_PANEL_INDEX_FIELD]= 1;  // increment by 1
				return update(dbConstants.ADMIN_COLLECTION_ID, {}, {$inc: currentDocument});
			}).then(function(result) {
				// Promise resolves to the new panel's collection ID
				resolve(currentPanelCollectionID);
			}).catch(function(err) {
				console.log(err);
				reject(err);
			});
	});
	return promise;
};


/* Connect to the DB and initialize it using defaults if the DB has not been
 * initialized already. */
var connectAndInitializeDB= function() {
	var promise= new Promise(function(resolve, reject) {
		// Connect to MongoDB
		connect().then(function(result) {
			db= result;
			console.log("Connected to MongoDB at " + dbURL);

			/* Check if the "FrangipaniDB" DB already exists. If it doesn't, 
			 * we need to intialize the DB. */
			 count(dbConstants.SYSTEM_NAMESPACES).then(function(result) {
			 	if (!result) { // # of collections in DB is 0
			 		console.log("Initializing FrangipaniDB.");
			 		createInitCollections()
			 			.catch(function(err) {
		 					reject(err);
		 				});
			 	} else {
			 		console.log("FrangipaniDB has already been initialized.");
			 	}
			 	resolve();
			 }).catch(function(err) {
			 	reject(err);
			 });
		}).catch(function(err) {
			reject(err);
		});
	});
	return promise;
};

/* Change or check if the server has been configured.
 * If changing the status of the configuration, use the set parameter.
 * set === true, changes the configured status to true.
 * If set is omitted, function returns the status as a boolean.
 * Returns a promise. */
var isConfigured= function(set) {
	assert.notStrictEqual(db, undefined); // ensure we're connected first
	assert(Object.prototype.toString.call(set) == "[object Boolean]"
		|| Object.prototype.toString.call(set) == "[object Undefined]",
		"Invalid config set parameter");

	var promise= new Promise(function(resolve, reject) {
		if (set === undefined) {  // Return config status
			findOne(dbConstants.ADMIN_COLLECTION_ID, {})
				.then(function(doc) {
					resolve(doc[dbConstants.SERVER_CONFIGURED_ID_FIELD]);
				}).catch(function(err) {
					reject(err);
				});
		} else { // set config status
			var currentDocument= {};
			currentDocument[dbConstants.SERVER_CONFIGURED_ID_FIELD]= set;
			update(dbConstants.ADMIN_COLLECTION_ID, {}, {$set: currentDocument})
				.then(function(doc) {
					resolve();
				}).catch(function(err) {
					reject(err);
				});
		}
	});
	return promise;
};


/* Create a new collection, raising an error if it already exists
 * returns a promise */

var createCollection = function(name){
	assert.notStrictEqual(db, undefined);


	var promise = new Promise(function(resolve,reject){
		if (name){
			db.createCollection(name,{strict:true},function(err,collection){
				if ( err ){
					reject(err);
				} else {
					resolve(collection);
				}
			});
		}
	});
	return promise
};

/* Drop a currently existing collection
 * returns a promise */
var dropCollection = function(collectionName){
	assert.notStrictEqual(db, undefined); 
	assert(Object.prototype.toString.call(collectionName) == "[object String]",
		"Invalid Options");

	var promise = new Promise(function(resolve,reject){
		db.dropCollection(collectionName, function(err,done){
			if (err){
				reject(err);
			} else {
				resolve(done);
			}
		});
	});
	return promise;
}



/* Assign desired objects to exports. */ 
exports.connectAndInitializeDB= connectAndInitializeDB;
exports.closeConnection= closeConnection;
exports.addPatient = addPatient;
exports.findAllPatients = findAllPatients;
exports.find=find;
exports.insertMany = insertMany;
exports.createCollection = createCollection;
exports.dropCollection = dropCollection;
exports.removePatient = removePatient;
exports.createIndex = createIndex;
exports.isConfigured= isConfigured;
exports.update= update;
exports.findAllPatientIds = findAllPatientIds;
exports.addPanel= addPanel;




