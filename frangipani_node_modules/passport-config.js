var LocalStrategy = require('passport-local').Strategy;
var GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;
var dbConstants = require('./mongodb_constants');
var api = require('./api');

module.exports = function(passport,dbFunctions){

	passport.serializeUser(function(user,done){
		done(null,user[dbConstants.USER_ID_FIELD]);
	});

	passport.deserializeUser(function(id,done){
		dbFunctions.findUserById(id).then(function(user){
			done(null,user);
		}).catch(function(err){
			done(err);
		});
	});

	passport.use('local-signup',new LocalStrategy({
		usernameField: 'email',
		passwordField: 'password',
		passReqToCallBack: true
	},
		function(req,email,password,done){
			process.nextTick(function(){
				var query = {};
				query[dbConstants.USER_ID_FIELD] = email;
				dbFunctions.findUserById(query)
				.then(function(user){
					if (user) {
						return done(null,false,req.flash('signupMessage','That Email already exists'));
					} else {
						var user = {}
						user[dbConstants.USER_ID_FIELD] = email;
						user[dbConstants.USER_PASSWORD_FIELD] = password;
						dbFunctions.addUser(user).then(function(){
							return done(null,user)
						}).catch(function(err){
							throw err;
						});
					};
				})
			})
		})
	);

	passport.use('local-login', new LocalStrategy({
		usernameField:'email',
		passwordField:'password',
		passReqToCallBack:true
	},

		function(req,email,password,done){
			var query = {};
			query[dbConstants.USER_ID_FIELD] = email;
			dbFunctions.findUserById(query)
			.then(function(user){
				if (user) { 
					dbFunctions.validatePassword(email,password).then(function(result){
						if (result){
							return done(null,email);
						} else {
							return done(null,false,req.flash("loginMessage", "Oops! Wrong Password"));
						}
					});
				} else {
					return done(null,false,req.flash('loginMessage','No user found'));
				}
			});
		}
	));

	passport.use(new GoogleStrategy({
		clientID: api.googleAuth.clientID,
		clientSecret: api.googleAuth.clientSecret,
		callbackURL:api.googleAuth.callbackURL
	},	
		function(token,refreshToken,profile,done){
			process.nextTick(function(){
				var query = {};
				query[dbConstants.USER_GOOGLE_ID_FIELD] = profile.id;
				dbFunctions.findUserByGoogleId(profile.id)
				.then(function(user){
					if (user) {
						return done(null,user);
					} else {
						var user = {};
						user[dbConstants.USER_ID_FIELD]= profile.emails[0].value;
						user[dbConstants.USER_GOOGLE_ID_FIELD]=profile.id;
						user[dbConstants.USER_GOOGLE_TOKEN_FIELD]=token;
						user[dbConstants.USER_GOOGLE_NAME_FIELD]=profile.displayName;
						user[dbConstants.USER_GOOGLE_EMAIL_FIELD]=profile.emails[0].value;
						dbFunctions.addUserGoogle(user).then(function(){
							return done(null,user)
						}).catch(function(err){
							throw err;
						});
					};
				})
			})
		}
	))
};