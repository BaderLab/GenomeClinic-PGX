var nodemailer = require('nodemailer');
var dbConstants = require('./mongodb_constants');
var uploader= require("jquery-file-upload-middleware");
var Queue = require('./queue');
var nodeConstant= require("./node_constants");
var Promise= require("bluebird");
var pgx = require('./pgx/pgx_haplotypes');




var queue = new Queue();

var transporter = nodemailer.createTransport({
	service:'gmail',
	auth:{
		user:'patrickmageee@gmail.com', // this must be set up a new each time.
		pass:'Aessedai12'
	}
});


module.exports = function(app,passport,dbFunctions){

	//==================================================================
	//LOGIN Request
	//==================================================================
	app.get('/login',function(req,res){
		res.sendFile('foundation-5.4.6/public/frangipani-login.html',{root:'.'})
	})
	//urlencodedParser
	app.post('/login',passport.authenticate('local-login',{
		successRedirect:'/success',
		failureRedirect:'/failure',
		failureFlash:true
	}));
		
	//==================================================================
	//SIGNUP Request
	//==================================================================
	app.get('/signup',function(req,res){
		res.sendFile('foundation-5.4.6/public/frangipani-signup.html',{root:'.'})
	});
	//urlencodedParser
	//parse signup information
	app.post('/signup',passport.authenticate('local-signup',{
		successRedirect:'/success',
		failureRedirect:'/failure',
		failureFlash:true
	}));

	app.get('/recover', function(req,res){
		if (req.isAuthenticated())
			res.redirect('/');
		
		res.sendFile('foundation-5.4.6/public/frangipani-recover.html',{root:'.'});
	});

	app.post('/recover',function(req,res){
		var body = req.body;
		//check if user is valid
		dbFunctions.findUserById(body.username)
		.then(function(user){
			if (user){
				dbFunctions.generatePassword(body.username)
				.then(function(result){
					console.log(body.username);
					var mailOptions = {
						from:'patrickmageee@gmail.com',
						to:body.username,
						subject:'password reset',
						html:'<h4>Password Reset<h4>'
						+ '<p>Your temporary password is:  ' + result + "</p>"
						+ '<p>Please login and change your password</p><br>'
						+ '<p><b>Do not reply to this email</b></p>'
					}
					transporter.sendMail(mailOptions,function(err,info){
						if (err){
							console.log(err);
						}else {
							req.flash('statusCode','200');
							res.redirect('/success');
						}
					})

					
				})

			} else {
				req.flash('error','Oops, No user was found!');
				req.flash('statusCode','404');
				res.redirect('/failure')
			}
		})

	})

	app.get('/setpassword',isLoggedIn, function(req,res){
		res.sendFile('foundation-5.4.6/frangipani-set-password.html',{root:'.'});
	})

	app.post('/setpassword',function(req,res){
		var data = req.body;
		var username = req.user.username.toString();
		if (req.user.hasOwnProperty(dbConstants.USER_GOOGLE_ID_FIELD)){
			req.flash('error','Oops, You appear to be signed in with a Google account, you must log into google to change your password!');
			req.flash('statusCode','400');
			res.redirect('/failure');
		} else {
			dbFunctions.findUserById(username).then(function(user){
				if (user){
					dbFunctions.validatePassword(username,data['password'].toString()).then(function(result){
						if (result){
							dbFunctions.changePassword(username, data['newpassword'].toString()).then(function(){
								req.flash('statusCode','200');
								res.redirect('/success');
							})
						} else {
							req.flash('error','Oops incorrect password!');
							req.flash('statusCode','400');
							res.redirect('/failure');
						}
					});
				} else {
					req.flash('error','Oops User not found');
					req.redirect('/failure');
				}
			})
		}
	})

	//route to send information in the event of a login failure
	app.get('/failure',function(req,res){
		var response ={status:'failed',error:req.flash('error'),redirectURL:undefined,statusCode:req.flash('statusCode')}
		res.send(JSON.stringify(response))
	});

	//route to send information in the event of a login success
	app.get('/success',function(req,res){
		var response = {status:'ok',error:undefined,redirectURL:'/',statusCode:req.flash('statusCode')}
		res.send(JSON.stringify(response))
	})
	//==================================================================
	//LOGIN WITH GOOGLE Request
	//==================================================================
	app.get('/auth/google', passport.authenticate('google', { scope : ['profile', 'email'] }));


	//==================================================================
	//RESPONSE FROM GOOGLE Request
	//==================================================================
    app.get('/auth/google/callback',
        passport.authenticate('google', {
            successRedirect : '/',
            failureRedirect : '/login'
       	})
    );

	//==================================================================
	//Logout
	//==================================================================
	app.get('/logout', function(req,res){
		req.logout()
		res.redirect('/')
	})


	//==================================================================
	//Route to the home page, or the config page if it is not set
	//==================================================================
	var configured = undefined;
	app.get("/", isLoggedIn, function(request, response) {
		/* Check if the server has already been configured. 
		 * Using a bit of promise voodoo to ensure we check the DB first, but only
		* when configured !== true, so as to reduce DB interactions. */	
		var promise= new Promise.resolve(configured);
		if (!configured) {
			promise= dbFunctions.isConfigured();
		}

		/* If server is not configured redirect to the config page. Use a boolean
		 * instead of checking the DB with each request. */
		promise.then(function(resolved_config) {
			if (resolved_config) {
				response.sendFile("foundation-5.4.6/frangipani.html", {root: "."});
				if (!configured) {
					configured= resolved_config;
				}
			} else {
				response.sendFile("foundation-5.4.6/config.html", {root: "."});
			}
		});
	});

	//==================================================================
	//Generic page routers
	//==================================================================

	//Upload page routes
	app.get('/upload',isLoggedIn, function(req,res){
		res.sendFile('foundation-5.4.6/upload.html',{root:'.'})
	});
	//statusPage routes
	app.get('/statuspage',isLoggedIn,function(req,res){
		res.sendFile('foundation-5.4.6/statuspage.html',{root:'.'})
	})

	//browse all patients and serve patient page
	app.get('/browsepatients',isLoggedIn,function(req,res){
		res.sendFile('foundation-5.4.6/patients.html',{root:'.'})
	})





	//==================================================================
	//check to see whether or not the user is authenticated yet
	//==================================================================	
	app.get('/authenticated', function(req,res){
		if (req.isAuthenticated()){
			res.send(JSON.stringify(true));
		} else {
			res.send(JSON.stringify(undefined));
		}
	});



	//==================================================================
	//config form
	//==================================================================
	app.use("/config", isLoggedIn, function(req,res){
		var configSettings= request.body;
		dbFunctions.update(dbConstants.ADMIN_COLLECTION_ID, {}, {$set: configSettings})
		.then(function(result){
			dbFunctions.isConfigured(true);
		}).then(function(result){
			res.send(result);
		});
	});



	//==================================================================
	//Database find routes
	//==================================================================

	app.use("/database/getPatients", isLoggedIn, function(req,res){
		dbFunctions.findAllPatientIds()
		.then(function(result){
			var fieldsArray = []
			queue.queue.map(function(item){
				fieldsArray = fieldsArray.concat(item['fields']);
			});
			return result.concat(fieldsArray);
		}).then(function(result){
			res.send(result);
		});
	});

	app.use('/database/find',isLoggedIn, function(req,res){
		dbFunctions.findAllPatients()
		.then(function(result){
			var fieldsArray = []
			queue.queue.map(function(item){
				fieldsArray = fieldsArray.concat(item['fields']);
			});
			return result.concat(fieldsArray);
		}).then(function(result){
			res.send(result);
		});
	});


	//==================================================================
	//PGX routes
	//==================================================================
	app.get("/patients", isLoggedIn, function(req,res){
		dbFunctions.findAllPatients(true, {sort: {"completed": -1}})
		.then(function(result){
			res.send(result);
		});

	});

	app.post("/pgx", isLoggedIn, function(req,res){
		var currentPatientID= req.body["patient_id"];
		dbFunctions.getPGXVariants(currentPatientID)
		.then(function(result) {
			// Return all PGx information: variants from this patient along
			// with all PGx haplotype and marker data. Also return the patient
			// ID to ensure we're returning the correct patient (in case 
			// multiple clicks are happening and there's a delay in the response).
			var allPGXDetails= {
				"pgxGenes": pgx.pgxGenes,
				"pgxCoordinates": pgx.pgxCoordinates,
				"patientID": currentPatientID,
				"variants": result
			};
			return Promise.resolve(allPGXDetails);
		}).then(function(result){
			res.send(result);
		});
	})

	//==================================================================
	//UPLOADER
	//==================================================================
	/* jquery-file-upload-middlware routs
	 * The jquery file upload middleware handles the bulf ot the work when it comes to the file
	 * Upload. The jquery-file-upload plugin emits an ajax call and then the middleware handles 
	 * the response. It has automatic event handlers for listeing to cancellations (aka aborts)
	 * and failures. In these scenarios it will automatically delete the incomplete file.
	 * additionally it also has handlers for file success and file download
	*/


	//Configure the uploader to tell it what directories to use
	uploader.configure({
		tmpDir:nodeConstant.TMP_UPLOAD_DIR,
		uploadDir:nodeConstant.VCF_UPLOAD_DIR,
		uploadUrl:'/upload/vcf'
	});
	/* Event Handler that is triggered upon successful completion of the file upload
	 * This handler facilitates the addition of annotation information adn the inclusion
	 * of the vcf file into the local database
	*/
	uploader.on('end',function(fileInfo,req,res){
		queue.addToQueue(fileInfo,req.fields)
		.then(function(){
			if (!queue.isRunning)
				return queue.run();
		}).catch(function(err){console.log(err.toString())});
	})

	app.use("/upload/vcf", isLoggedIn, uploader.fileHandler());



	//==================================================================
	//DEPRECATED GA4G REQUESTS
	//==================================================================
	app.get("/datasets", isLoggedIn, function(req,res){
		res.redirect('construction.html');
	});

	app.use("/callsets/search", isLoggedIn, function(req,res){
		res.redirect('construction.html');
	});

	app.use("/variants/search", isLoggedIn, function(req,res){
		res.redirect('construction.html');
	});


	//==================================================================
	//Handle 404 routes
	//==================================================================

	app.get('*', function(req,res){
		res.sendFile('foundation-5.4.6/public/404notfound.html',{root:'.'})
	})
}




function isLoggedIn(req,res,next){
	if (req.isAuthenticated())
		return next();
	res.redirect('/login');
}