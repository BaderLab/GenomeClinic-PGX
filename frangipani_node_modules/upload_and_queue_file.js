//que and run
var Promise = require('bluebird');
var nodeConstant= require("./node_constants"); 
var annotateFile = require('../scripts/annotateAndAddVariants');
var fs = Promise.promisifyAll(require('fs'));



function queue(){
}


//variables
queue.prototype.isRunning = false;
queue.prototype.queue = [];

//functions
queue.prototype.addToQueue = function(fileParams, patientFields){
	var inputObj = {
		fileInfo: fileParams,
		fields: patientFields
	};

	this.queue.push(inputObj);
};
queue.prototype.removeFirst = function(){
	this.queue.shift();
}
queue.prototype.first = function(){
	var outObj = this.queue[0];
	return outObj;
}

queue.prototype.splitInputFields = function(fields){
	var self = this;
	var promise = new Promise(function(resolve,reject){
		var tempObj = {};
		var outList = [];

		for (field in fields){
			if (fields.hasOwnProperty(field)){
				var splitFields = field.split('-');
				if (!tempObj.hasOwnProperty(splitFields[0]))
					tempObj[splitFields[0]] = {};
				tempObj[splitFields[0]][splitFields[1]] = fields[field];
			}
		}
		for (num in tempObj){
			if (tempObj.hasOwnProperty(num)){
				outList.push(tempObj[num]);
			}
		}
		resolve(outList);
	})
	return promise;
}


queue.prototype.run = function(){
	self = this;
	var promise = new Promise(function(resolve,reject){
		if (!self.isRunning)
			self.isRunning = true;
	
		var params = self.first();
		var fileInfo = params.fileInfo;
		var fields = params.fields;
		var annodb;
		var annovarpath;
		//var dbusage = 'g';

		self.splitInputFields(fields)
		.each(function(patientFields){
			return dbFunctions.addPatient(patientFields);
		/*}).then(function(){
			var options = {
				input:fileInfo.name,
				dbusage:'g', //dbFunctions.find({})
				annodb:'refgene', // annodb
				annovarpath:annovarpath
			};

			return annotateFile(options);*/
		}).then(function(result){
			console.log(result);
			self.removeFirst();
			resolve("All files uploaded");
		}).catch(function(err){
			console.log(err);
		})
		// do somehting here;
	})

	promise.then(function(){
		if (self.queue.length > 0){
			return self.run();
		} else {
			self.isRunning = false;
		}
	}).catch();

	return promise;
}


module.exports = queue;
